boolean flagBuildSuccess = false

@Library("veacodeGlobalSharedLibrary") _
pipeline {

  agent any

  triggers {
    GenericTrigger(
     genericHeaderVariables: [
        [key: 'X-GitHub-Event', regexpFilter: '']
     ],
     genericVariables: [
        [key: 'ref', value: '$.ref']
     ],
     
     causeString: 'Triggered on $ref',

     token: 'mytoken123',
     tokenCredentialId: '',
     
     printContributedVariables: true,
     printPostContent: true,
    )
  }

  stages {
    stage('Build') {
        steps {
            echo "[INFO] GIT_EVENT: $x_github_event"
            echo "[INFO] GIT_BRANCH: ${GIT_BRANCH}"
            echo "[INFO] GIT_COMMIT: ${GIT_COMMIT}"
            echo "[INFO] GIT_URL: ${GIT_URL}"
            echo ""

            script {
                try {
                    echo "[INFO] Starting build process..."
                    dir('./app') {
                        sh 'mvn clean package'
                    }
                    echo "[INFO] Build process has finished."
                    echo "[INFO] Archiving artifacts..."
                    archiveArtifacts artifacts: 'app/target/verademo.war', allowEmptyArchive: false, onlyIfSuccessful: true
                    flagBuildSuccess = true
                }
                catch (Exception e) {
                    unstable("${STAGE_NAME} failed!")
                    currentBuild.result = 'FAILURE'
                    flagBuildSuccess = false
                }
            }
        }
    }

    stage('Dispatch') {
        // Execute only if Build succeeded
        when {
            equals expected: true, actual: flagBuildSuccess
        }
        steps {
                echo "[INFO] Dispatching...."
                veracodePipelineScan()
        }
    }
  }
}
